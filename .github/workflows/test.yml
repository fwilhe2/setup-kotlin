name: 'build-test'
on:
  pull_request:
  push:
    branches:
      - main
      - 'releases/*'

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: |
          npm ci
      - run: |
          npm run all
      - run: |
          git diff --name-only --exit-code
      - run: |
          node dist/index.js

          if ! [ -x "$(command -v kotlinc)" ]; then
            echo 'Error: Expected kotlinc to be installed.' >&2
            exit 1
          fi
        env:
          INPUT_VERSION: 1.4.21
          INPUT_INSTALL-NATIVE: false

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v2
      - uses: ./

  test-with-arg:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v2
      - uses: ./
        with:
          version: 1.4.21
          script: |
              #!/usr/bin/env kotlin
              fun getInput(name: String): String {
                  return System.getenv("INPUT_${name.replace(" ", "_").toUpperCase()}")
              }
              if (getInput("version") != "1.4.21") {
                throw RuntimeException("Expected version 1.4.21")
              }

  test-with-arg-default-version:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v2
      - uses: ./
        with:
          script: |
              #!/usr/bin/env kotlin
              fun getInput(name: String): String {
                  return System.getenv("INPUT_${name.replace(" ", "_").toUpperCase()}")
              }
              if (getInput("version") != "1.4.21") {
                throw RuntimeException("Expected version 1.4.21")
              }

  test-with-native:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v2
      - uses: ./
        with:
          version: 1.4.21
      - run: kotlinc -version
      - run: kotlinc-native -version
      - run: echo 'fun main() {println("Hello Kotlin/Native!")}' > hello.kt
      - run: kotlinc-native hello.kt
      - run: ./program.exe
        if: ${{ matrix.os == 'windows-latest' }}
      - run: ./program.kexe
        if: ${{ matrix.os != 'windows-latest' }}